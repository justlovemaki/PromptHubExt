# 工作流名称
name: Build and Release Desktop App

# 工作流触发器
on:
  push:
    # 只有当 'desktop/package.json' 文件被推送到 main 或 master 分支时才触发
    paths:
      - 'desktop/package.json'
    branches:
      - main
      - master

jobs:
  # 0. 创建一个新任务来调用可复用工作流
  # run-pre-clean:
  #   uses: ./.github/workflows/Auto-Clean.yml
  #   permissions: write-all

  # 构建任务：与之前基本相同，在三个平台上构建应用
  build:
    # needs: run-pre-clean
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            target: AppImage
            ext: AppImage
          - os: windows-latest
            platform: win
            target: nsis
            ext: exe
          - os: macos-latest
            platform: mac
            target: dmg
            ext: dmg

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: desktop/package-lock.json

    - name: Install dependencies
      run: |
        cd desktop
        npm ci

    - name: Setup Python (for native modules)
      uses: actions/setup-python@v4
      if: matrix.os == 'ubuntu-latest'
      with:
        python-version: '3.11'

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm-dev libxss-dev libgtk-3-dev libgbm-dev libasound2-dev

    - name: Install additional dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install create-dmg

    - name: Build application (electron-vite + electron-builder)
      run: |
        cd desktop
        npm run build:${{ matrix.platform }}
      env:
        NODE_ENV: production

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ai-prompt-hub-desktop-${{ matrix.platform }}
        path: desktop/dist-electron/**/*
        if-no-files-found: error
        retention-days: 1 # <--- 这是修复的关键，将产物保留期设置为1天

  # 发布任务：构建完成后，整理产物并创建 Release
  release:
    needs: build
    runs-on: ubuntu-latest
    
    # 授予创建 Release 所需的权限
    permissions:
      contents: write

    steps:
    - name: Checkout code
      # 需要检出代码以读取 version 文件
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -R artifacts

    - name: Read version from package.json
      id: get_version
      run: echo "VERSION=$(node -p "require('./desktop/package.json').version")" >> $GITHUB_ENV

    - name: Prepare release assets
      run: |
        # 创建一个用于存放最终发布文件的目录
        mkdir release-assets
        # 遍历所有下载的构建产物子目录 (build-linux, build-win, etc.)
        for dir in artifacts/*/; do
          # 提取平台名称，例如 "linux"
          platform=$(basename "$dir" | cut -d'-' -f3)
          echo "Processing platform: $platform"
          
          # 1. 查找并压缩以 unpacked 结尾的文件夹
          for unpacked_dir in "$dir"/*unpacked; do
            if [ -d "$unpacked_dir" ]; then
              zip -r "release-assets/ai-prompt-hub-desktop-${platform}-unpacked-${{ env.VERSION }}.zip" "$unpacked_dir"
            fi
          done
          
          # 2. 查找并复制可执行文件，保留原始文件名但添加统一前缀
          find "$dir" -maxdepth 1 -type f \( -name "*.AppImage" -o -name "*.exe" -o -name "*.dmg" \) -exec bash -c ' \
            for file; do \
              name=$(basename "$file"); \
              ext="${name##*.}"; \
              # 直接使用原始文件名作为后缀，但添加项目前缀 \
              cp "$file" "release-assets/ai-prompt-hub-desktop-${name}"; \
            done' _ {} +
        done

    - name: Display final release assets
      run: ls -l release-assets

    - name: Create or Update GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        # 使用 version 文件内容作为标签名和 Release 名称
        tag_name: v${{ env.VERSION }}
        name: Release v${{ env.VERSION }}
        # 指向 release-assets 目录下的所有文件
        files: release-assets/*
        # 如果标签已存在，会更新对应的 Release。如果不存在，则创建。
        # 注意: softprops/action-gh-release 默认会覆盖已存在的 release 的资源文件
        # 它不会删除旧的，而是上传新的。如果需要更精细的控制，可能需要更复杂的脚本。
        generate_release_notes: true # 自动生成更新日志