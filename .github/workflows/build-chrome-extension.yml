# 工作流名称
name: Build and Release Chrome Extension

# 工作流触发器
on:
  push:
    # 只有当 'chrome/manifest.json' 文件被推送到 main 或 master 分支时才触发
    paths:
      - 'chrome/manifest.json'
    branches:
      - main
      - master

jobs:
  # 0. 创建一个新任务来调用可复用工作流
  # run-pre-clean:
  #   uses: ./.github/workflows/Auto-Clean.yml
  #   permissions: write-all
  #   with:
  #     # 示例：删除 release-assets/ 目录下所有 v 开头的 zip 文件
  #     # file_pattern: 'release-assets/ai-prompt-hub-chrome-extension-v*.zip'
  #     file_pattern: 'ai-prompt-hub-chrome-extension*.zip'

  # 构建任务：构建Chrome扩展
  build:
    # needs: run-pre-clean
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: chrome/package-lock.json

    - name: Install dependencies
      run: |
        cd chrome
        npm ci

    - name: Build extension
      run: |
        cd chrome
        npm run build

    - name: Prepare extension package
      run: |
        cd chrome/dist
        zip -r ../chrome-extension.zip . -x ".*" # 压缩dist目录内容到zip文件，排除隐藏文件

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: chrome-extension
        path: chrome/chrome-extension.zip
        if-no-files-found: error
        retention-days: 1 # <--- 这是修复的关键，将产物保留期设置为1天

  # 发布任务：创建GitHub Release
  release:
    needs: build
    runs-on: ubuntu-latest
    
    # 授予创建 Release 所需的权限
    permissions:
      contents: write

    steps:
    - name: Checkout code
      # 需要检出代码以读取 manifest.json 文件
      uses: actions/checkout@v4

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: chrome-extension
        path: ./artifact

    - name: Read version from manifest.json
      id: get_version
      run: |
        VERSION=$(node -p "require('./chrome/manifest.json').version")
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Prepare release assets
      run: |
        mkdir release-assets
        cp ./artifact/chrome-extension.zip release-assets/ai-prompt-hub-chrome-extension-v${{ env.VERSION }}.zip

    - name: Display final release assets
      run: ls -l release-assets

    - name: Create or Update GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        # 使用 manifest.json 中的版本号作为标签名和 Release 名称
        tag_name: chrome-v${{ env.VERSION }}
        name: Chrome Extension v${{ env.VERSION }}
        # 指向 release-assets 目录下的所有文件
        files: release-assets/*
        generate_release_notes: true # 自动生成更新日志

  # 发布到Chrome Web Store（可选，需要配置相关密钥）
  # publish-to-cws:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: ${{ secrets.CWS_CLIENT_ID != '' && secrets.CWS_CLIENT_SECRET != '' && secrets.CWS_REFRESH_TOKEN != '' }}
     
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Download artifact
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: chrome-extension
  #       path: ./artifact

  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '20'

  #   - name: Install Chrome Web Store CLI
  #     run: npm install -g chrome-webstore-upload-cli

  #   - name: Upload and publish to Chrome Web Store
  #     run: |
  #       cwu upload \
  #         --source ./artifact/chrome-extension.zip \
  #         --extension-id ${{ secrets.CWS_EXTENSION_ID }} \
  #         --client-id ${{ secrets.CWS_CLIENT_ID }} \
  #         --client-secret ${{ secrets.CWS_CLIENT_SECRET }} \
  #         --refresh-token ${{ secrets.CWS_REFRESH_TOKEN }}
  #     env:
  #       CWS_EXTENSION_ID: ${{ secrets.CWS_EXTENSION_ID }}
  #       CWS_CLIENT_ID: ${{ secrets.CWS_CLIENT_ID }}
  #       CWS_CLIENT_SECRET: ${{ secrets.CWS_CLIENT_SECRET }}
  #       CWS_REFRESH_TOKEN: ${{ secrets.CWS_REFRESH_TOKEN }}